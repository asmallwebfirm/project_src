<?php

/**
 * @file
 * Hooks and functions for the Project Alternate Source module.
 */


/**
 * Defines the pass-through URL back to Drupal's main project repository.
 */
define('PROJECT_SRC_PASSTHROUGH', 'https://updates.drupal.org/release-history');


/**
 * Implements hook_menu().
 */
function project_src_menu() {
  $items['drupal/release-history/%/%'] = array(
    'title' => 'Alternate Drupal project release history',
    'delivery callback' => 'project_src_deliver_clean_page',
    'page callback' => 'project_src_get_project',
    'page arguments' => array(2, 3),
    'file' => 'project_src.pages.inc',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}


/**
 * Implements hook_hook_info().
 */
function project_src_hook_info() {
  $hooks = array(
    'project_src_info',
    'project_src_info_alter',
    'project_src_releases',
    'project_src_releases_alter',
    'project_src_terms',
    'project_src_terms_alter',
  );

  return array_fill_keys($hooks, array('group' => 'project_src'));
}


/**
 * Implements hook_theme().
 */
function project_src_theme($existing, $type, $theme, $path) {
  $pm_path = drupal_get_path('module', 'project_src');

  // Primary project XML.
  $items['project_src_xml'] = array(
    'variables' => array(
      'title' => '',
      'short_name' => '',
      'creator' => '',
      'type' => 'project_module',
      'api_version' => '',
      'recommended_major' => '',
      'supported_majors' => '',
      'default_major' => '',
      'project_status' => 'published',
      'link' => '',
      'terms' => '',
      'releases' => '',
    ),
    'path' => $pm_path . '/theme',
    'file' => 'theme.inc',
    'template' => 'project.xml',
  );

  // Project releases.
  $items['project_src_releases'] = array(
    'path' => $pm_path . '/theme',
    'file' => 'theme.inc',
    'function' => 'project_src_theme_releases',
  );

  // Project release XML.
  $items['project_src_release'] = array(
    'variables' => array(
      'name' => '',
      'version' => '',
      'tag' => '',
      'version_major' => '',
      'version_patch' => '',
      'version_extra' => '',
      'status' => 'published',
      'terms' => '',
      'release_link' => '',
      'download_link' => '',
      'date' => '',
      'mdhash' => '',
      'filesize' => '',
      'archive_type' => 'tar.gz',
    ),
    'path' => $pm_path . '/theme',
    'file' => 'theme.inc',
    'template' => 'release.xml',
  );

  // Project terms template.
  $items['project_src_terms'] = array(
    'path' => $pm_path . '/theme',
    'file' => 'theme.inc',
    'function' => 'project_src_theme_terms',
  );

  // Project term template.
  $items['project_src_term'] = array(
    'variables' => array(
      'name' => '',
      'value' => '',
    ),
    'path' => $pm_path . '/theme',
    'file' => 'theme.inc',
    'template' => 'term.xml',
  );

  // Error XML.
  $items['project_src_xml_error'] = array(
    'path' => $pm_path . '/theme',
    'file' => 'theme.inc',
    'function' => 'project_src_theme_error',
  );

  return $items;
}


/**
 * Delivers a page without running through any additional processing.
 *
 * @param $page_callback_result
 *   A string containing the result output of the page.
 */
function project_src_deliver_clean_page($page_callback_result) {
  print $page_callback_result;
  drupal_page_footer();
}


/**
 * Returns an array of custom projects keyed by project short name.
 *
 * @param string $api_version
 *   (Optional) The API version of projects to return.
 *
 * @param string $module
 *   (Optional) The name of the module that declared the project.
 *
 * @return array
 *   If $api_version is specified, an array of projects keyed by project short
 *   name is returned (or an empty array if the specified $api_version is not
 *   supported). If no $api_version is specified, projects of all $api_versions
 *   will be returned. If $module is specified, these projects will be filtered
 *   down to only those declared by the specified $module.
 */
function project_src_get_projects($api_version = NULL, $module = NULL) {
  // This may be called frequently; we should statically cache the results.
  $projects = &drupal_static(__FUNCTION__, array());

  if (empty($projects)) {
    // If a module is provided, only load projects for the specified module.
    if (!empty($module)) {
      // Load and allow modifications to Project SRC projects by module.
      $projects = module_invoke($module, 'project_src_info');
      $projects = empty($projects) ? array() : $projects;
      drupal_alter('project_src_info', $projects);
    }
    // Otherwise, load all declared projects.
    else {
      // Load and allow modifications to Project SRC projects.
      $projects = module_invoke_all('project_src_info');
      drupal_alter('project_src_info', $projects);
    }
  }

  if (!empty($api_version)) {
    return isset($projects[$api_version]) ? $projects[$api_version] : array();
  }
  else {
    return $projects;
  }
}
